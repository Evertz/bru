import { Long } from 'long';

import { Any } from './any';
import { BuildStatus } from './build-status';
import { Timestamp } from './timestamp';

// Which build component generates this event stream. Each build component
// may generate one event stream.
export enum BuildComponent {
  // Unknown or unspecified; callers should never set this value.
  UNKNOWN_COMPONENT,

  // A component that coordinates builds.
  CONTROLLER,

  // A component that runs executables needed to complete a build.
  WORKER ,

  // A component that builds something.
  TOOL
}

// Unique identifier for a build event stream.
export interface StreamId {
  // The id of a Build message.
  buildId?: string;

  // The unique invocation ID within this build.
  // It should be the same as {invocation} (below) during the migration.
  invocationId: string;

  // The component that emitted this event.
  component?: BuildComponent;
}

// The type of console output stream.
export enum ConsoleOutputStream {
  // Unspecified or unknown.
  UNKNOWN = 0,

  // Normal output stream.
  STDOUT = 1,

  // Error output stream.
  STDERR = 2
}

// How did the event stream finish.
export enum FinishType {
  // Unknown or unspecified; callers should never set this value.
  FINISH_TYPE_UNSPECIFIED = 0,

  // Set by the event publisher to indicate a build event stream is
  // finished.
  FINISHED = 1,

  // Set by the WatchBuild RPC server when the publisher of a build event
  // stream stops publishing events without publishing a
  // BuildComponentStreamFinished event whose type equals FINISHED.
  EXPIRED = 2
}

// Notification that the build system has attempted to run the build tool.
export interface InvocationAttemptStarted {
  // The number of the invocation attempt, starting at 1 and increasing by 1
  // for each new attempt. Can be used to determine if there is a later
  // invocation attempt replacing the current one a client is processing.
  attemptNumber: Long;

  // Additional details about the invocation.
  details?: Any;
}

export interface InvocationAttemptFinished {
  // Final status of the invocation.
  invocationStatus: BuildStatus;
}

// An event representing some state change that occurred in the build. This
// message does not include field for uniquely identifying an event.
export interface BuildEvent {
  eventTime: Timestamp;

  // //////////////////////////////////////////////////////////////////////////
  // Events that indicate a state change of a build request in the build
  // queue.
  // one of

  // An invocation attempt has started.
  invocationAttemptStarted?: InvocationAttemptStarted;

  // An invocation attempt has finished.
  invocationAttemptFinished?: InvocationAttemptFinished;

  // The build is enqueued (just inserted to the build queue or put back
  // into the build queue due to a previous build failure).
  buildEnqueued?: {
    details?: Any;
  }

  // The build has finished. Set when the build is terminated.
  buildFinished?: {
    status: BuildStatus;
  }

  // An event containing printed text.
  consoleOutput?: {
    // The output stream type.
    type: ConsoleOutputStream;

    // Regular UTF-8 output; normal text.
    textOutput?: string;

    // Used if the output is not UTF-8 text (for example, a binary proto).
    binaryOutput?: Uint8Array;
  }

  // Indicates the end of a build event stream (with the same StreamId) from
  // a build component executing the requested build task.
  // *** This field does not indicate the WatchBuild RPC is finished. ***
  componentStreamFinished?: {
    // How the event stream finished.
    type: FinishType;
  }

  // Structured build event generated by Bazel about its execution progress.
  bazelEvent?: Any;

  // An event that contains supplemental tool-specific information about
  // build execution.
  buildExecutionEvent?: Any;

  // An event that contains supplemental tool-specific information about
  // source fetching.
  sourceFetchEvent?: Any;
}
